# -*- coding: utf-8 -*-
"""!
robotics_project_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10LXEqaNJSZI4bQV8r8NDdzJEd5WNs4cJ

# Parameters
"""

iterations = 1 # number of something
epochs_step = 10 # number of something

"""# Preparation

## Install Requirements
"""

!nvidia-smi

#!pip install -U ultralytics
!pip install ultralytics==8.0.196

from google.colab import drive
drive.mount('/content/drive')

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="nuI13APqQA4qc063c07u")
project = rf.workspace("giolor").project("robotics_project_dataset")
version = project.version(1)
dataset = version.download("yolov8")

"""## Install YOLOv8"""

from ultralytics import YOLO
import os
from IPython.display import display, Image
from IPython import display
display.clear_output()
#!yolo mode=checks

"""# Train YOLOv8 Model on Custom Dataset"""

def get_epochs(file):
  if file == None:
    raise Exception("Missing counter path")

  counter_file = open(file, "r")
  counter = int(counter_file.readline())
  counter_file.close()
  return counter

def set_epochs(file, epochs):
  if file == None:
    raise Exception("Missing counter path")
  elif epochs == None:
    raise Exception("Missing epochs")

  counter_file = open(f"{drive_folder}/counter.txt", "w")
  counter_file.write(f"{epochs}")
  counter_file.close()

import os
base_path = '/content/runs/detect'
drive_folder = "/content/drive/MyDrive/robotics_project_model"
counter_path = f"{drive_folder}/counter.txt"

epochs_session = 0
epochs_total = get_epochs(counter_path)

for i in range(0,iterations):

  print("\n")
  print("**********************************\n")
  print(f"Session epochs: {epochs_session}\n")
  print(f"Total epochs: {epochs_total}\n")
  print("**********************************\n")

  # Load a model
  model_path = f"{drive_folder}/train/weights/best.pt"
  if not os.path.isfile(model_path):
    model_path = f"{drive_folder}/old/best.pt"

  model = YOLO(model_path)  # load a pretrained model (recommended for training)

  # Save previous model
  os.system(f"cp {drive_folder}/train/weights/best.pt {drive_folder}/old/best.pt")
  os.system(f"rm -rf {drive_folder}/train")
  os.system(f"mv {drive_folder}/val {drive_folder}/old")

  # Use the model
  model.train(data=f"{drive_folder}/data-roboflow.yaml", epochs=epochs_step, project=f"{drive_folder}", name="train")  # train the model
  model.val(data=f"{drive_folder}/data-roboflow.yaml", project=f"{drive_folder}", name="val")  # evaluate model performance on the validation set


  #path = model.export(format="onnx")  # export the model to ONNX format

  epochs_session += epochs_step
  epochs_total += epochs_step
  set_epochs(counter_path, epochs_total)